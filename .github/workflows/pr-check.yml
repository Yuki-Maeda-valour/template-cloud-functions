name: PR Check

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  pr-check:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Check for breaking changes
      run: |
        # Check if package.json dependencies changed
        git diff origin/main...HEAD --name-only | grep -q package.json && echo "⚠️ Dependencies changed" || echo "✅ No dependency changes"

    - name: Lint only changed files
      run: |
        # Get changed TypeScript files
        CHANGED_FILES=$(git diff origin/main...HEAD --name-only --diff-filter=ACM | grep -E '\.(ts|js)$' | grep '^src/' || true)
        if [ -n "$CHANGED_FILES" ]; then
          echo "Checking changed files: $CHANGED_FILES"
          npx biome check $CHANGED_FILES
        else
          echo "No TypeScript files changed"
        fi

    - name: Type check
      run: npm run typecheck

    - name: Run tests
      run: npm run test:coverage

    - name: Build project
      run: npm run build

    - name: Comment PR with status
      uses: actions/github-script@v7
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && comment.body.includes('PR Check Results')
          );
          
          const body = `## PR Check Results ✅
          
          - ✅ Type check passed
          - ✅ Lint check passed  
          - ✅ Tests passed
          - ✅ Build successful
          
          Ready for review! 🚀`;
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: body
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });
          }